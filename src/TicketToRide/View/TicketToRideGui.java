/**
 * TicketToRideGui.java
 * This class represent the main gui of the game. It contains the Swing API code
 * which has been autogenerated to display Swing objects in a JFrame for
 * interacting with the Model classes via the ActionListeners and Control classes.
 */
package TicketToRide.View;


import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTextArea;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.border.BevelBorder;
import javax.swing.border.EmptyBorder;

import TicketToRide.Control.PlayerHandler;
import TicketToRide.Model.City;
import TicketToRide.Model.Constants.playerColor;
import TicketToRide.Model.Constants;
import TicketToRide.Model.Constants.trainCard;
import TicketToRide.Model.Deck;
import TicketToRide.Model.DestinationCard;
import TicketToRide.Model.ParseCSVData;
import TicketToRide.Model.Path;
import TicketToRide.Model.Player;
import TicketToRide.Model.World;

public class TicketToRideGui extends JFrame {

	private JPanel contentPane;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					TicketToRideGui frame = new TicketToRideGui();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public TicketToRideGui() {
		setTitle("Ticket To Ride");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 1300, 700);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		contentPane.setLayout(new BorderLayout(0, 0));
		setContentPane(contentPane);

		//
		List<Player> p = new ArrayList<Player>();
		p.add(new Player(playerColor.BLACK));
		p.add(new Player(playerColor.BLUE));
		p.add(new Player(playerColor.GREEN));
		p.add(new Player(playerColor.RED));
		p.add(new Player(playerColor.YELLOW));
		Deck.startHand(p);
		//System.out.println(Deck.trainFaceUpCards.size());
		//
		
		
		
		// ADD SWING GUI ELEMENTS TO JFRAME (AUTOGENERATED)
		JSplitPane spBoard = new JSplitPane();
		contentPane.add(spBoard, BorderLayout.CENTER);

		JPanel pnlBoard = new JPanel();
		spBoard.setRightComponent(pnlBoard);
		pnlBoard.setLayout(new BorderLayout(0, 0));

		JPanel pnlDecks = new JPanel();
		spBoard.setLeftComponent(pnlDecks);
		pnlDecks.setLayout(new GridLayout(8, 1, 0, 0));

		JPanel pnlScoreLogPanel = new JPanel();
		pnlBoard.add(pnlScoreLogPanel, BorderLayout.NORTH);
		pnlScoreLogPanel.setLayout(new GridLayout(0, 2, 0, 0));

		JScrollPane scpScores = new JScrollPane();
		pnlScoreLogPanel.add(scpScores);

		JTextArea txtrScores = new JTextArea();
		txtrScores.setFont(new Font("Monospaced", Font.PLAIN, 13));
		txtrScores.setText("Player\tScore\tDestination Cards\tTrain Cards\tInventory\n" + "1\n" + "2\n" + "3\n" + "4\n" + "5");
		scpScores.setViewportView(txtrScores);

		JScrollPane scpLog = new JScrollPane();
		pnlScoreLogPanel.add(scpLog);

		JTextArea txtrLog = new JTextArea();
		txtrLog.setFont(new Font("Monospaced", Font.PLAIN, 13));
		txtrLog.setText("log\n" + "1\n" + "2\n" + "3\n" + "4\n" + "5");
		scpLog.setViewportView(txtrLog);

		JPanel pnlGraph = new JPanel();
		pnlGraph.setToolTipText("");
		pnlGraph.setBackground(Color.CYAN);
		pnlBoard.add(pnlGraph, BorderLayout.CENTER);
		pnlGraph.setLayout(new BorderLayout(0, 0));

		JPanel pnlCurrentPlayer = new JPanel();
		pnlBoard.add(pnlCurrentPlayer, BorderLayout.SOUTH);
		pnlCurrentPlayer.setLayout(new BorderLayout(0, 0));

		JPanel pnlCurrentPlayerDestCards = new JPanel();
		pnlCurrentPlayer.add(pnlCurrentPlayerDestCards, BorderLayout.WEST);
		pnlCurrentPlayerDestCards.setLayout(new BorderLayout(0, 0));

		JScrollPane scpCurrentPlayerDestCards = new JScrollPane();
		pnlCurrentPlayerDestCards.add(scpCurrentPlayerDestCards, BorderLayout.CENTER);

		JList jlstCurrentPlayerDestCards = new JList();
		jlstCurrentPlayerDestCards.setFont(new Font("Courier New", Font.PLAIN, 11));
		jlstCurrentPlayerDestCards.setVisibleRowCount(3);
		jlstCurrentPlayerDestCards.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		final DefaultListModel destList = new DefaultListModel(); //SF
		jlstCurrentPlayerDestCards.setModel(destList);
		scpCurrentPlayerDestCards.setViewportView(jlstCurrentPlayerDestCards);

		JPanel pnlCurrentPlayerTrainCards = new JPanel();
		pnlCurrentPlayer.add(pnlCurrentPlayerTrainCards, BorderLayout.CENTER);
		pnlCurrentPlayerTrainCards.setLayout(new GridLayout(1, 12, 0, 0));

		int occurrences = Collections.frequency(p.get(0).getTrainCards(), trainCard.PINK);//?
		System.out.println(p.get(0).getTrainCards().size() + " " + p.get(0).getColor().equals(playerColor.BLACK));
		JLabel lblCurrentPlayerTrainCardPink = new JLabel(Integer.toString(occurrences));
		//JLabel lblCurrentPlayerTrainCardPink = new JLabel("0");
		lblCurrentPlayerTrainCardPink.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblCurrentPlayerTrainCardPink.setHorizontalAlignment(SwingConstants.CENTER);
		lblCurrentPlayerTrainCardPink.setOpaque(true);
		lblCurrentPlayerTrainCardPink.setBackground(Color.PINK);
		pnlCurrentPlayerTrainCards.add(lblCurrentPlayerTrainCardPink);

		JLabel lblCurrentPlayerTrainCardWhite = new JLabel("0");
		lblCurrentPlayerTrainCardWhite.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblCurrentPlayerTrainCardWhite.setHorizontalAlignment(SwingConstants.CENTER);
		lblCurrentPlayerTrainCardWhite.setBackground(Color.WHITE);
		lblCurrentPlayerTrainCardWhite.setOpaque(true);
		pnlCurrentPlayerTrainCards.add(lblCurrentPlayerTrainCardWhite);

		JLabel lblCurrentPlayerTrainCardBlue = new JLabel("0");
		lblCurrentPlayerTrainCardBlue.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblCurrentPlayerTrainCardBlue.setHorizontalAlignment(SwingConstants.CENTER);
		lblCurrentPlayerTrainCardBlue.setForeground(Color.WHITE);
		lblCurrentPlayerTrainCardBlue.setBackground(Color.BLUE);
		lblCurrentPlayerTrainCardBlue.setOpaque(true);
		pnlCurrentPlayerTrainCards.add(lblCurrentPlayerTrainCardBlue);

		JLabel lblCurrentPlayerTrainCardYellow = new JLabel("0");
		lblCurrentPlayerTrainCardYellow.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblCurrentPlayerTrainCardYellow.setHorizontalAlignment(SwingConstants.CENTER);
		lblCurrentPlayerTrainCardYellow.setBackground(Color.YELLOW);
		lblCurrentPlayerTrainCardYellow.setOpaque(true);
		pnlCurrentPlayerTrainCards.add(lblCurrentPlayerTrainCardYellow);

		JLabel lblCurrentPlayerTrainCardRed = new JLabel("0");
		lblCurrentPlayerTrainCardRed.setForeground(Color.WHITE);
		lblCurrentPlayerTrainCardRed.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblCurrentPlayerTrainCardRed.setHorizontalAlignment(SwingConstants.CENTER);
		lblCurrentPlayerTrainCardRed.setBackground(Color.RED);
		lblCurrentPlayerTrainCardRed.setOpaque(true);
		pnlCurrentPlayerTrainCards.add(lblCurrentPlayerTrainCardRed);

		JLabel lblCurrentPlayerTrainCardBlack = new JLabel("0");
		lblCurrentPlayerTrainCardBlack.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblCurrentPlayerTrainCardBlack.setHorizontalAlignment(SwingConstants.CENTER);
		lblCurrentPlayerTrainCardBlack.setForeground(Color.WHITE);
		lblCurrentPlayerTrainCardBlack.setBackground(Color.BLACK);
		lblCurrentPlayerTrainCardBlack.setOpaque(true);
		pnlCurrentPlayerTrainCards.add(lblCurrentPlayerTrainCardBlack);

		JLabel lblCurrentPlayerTrainCardOrange = new JLabel("0");
		lblCurrentPlayerTrainCardOrange.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblCurrentPlayerTrainCardOrange.setHorizontalAlignment(SwingConstants.CENTER);
		lblCurrentPlayerTrainCardOrange.setForeground(Color.BLACK);
		lblCurrentPlayerTrainCardOrange.setBackground(Color.ORANGE);
		lblCurrentPlayerTrainCardOrange.setOpaque(true);
		pnlCurrentPlayerTrainCards.add(lblCurrentPlayerTrainCardOrange);

		JLabel lblCurrentPlayerTrainCardGreen = new JLabel("0");
		lblCurrentPlayerTrainCardGreen.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblCurrentPlayerTrainCardGreen.setHorizontalAlignment(SwingConstants.CENTER);
		lblCurrentPlayerTrainCardGreen.setBackground(Color.GREEN);
		lblCurrentPlayerTrainCardGreen.setOpaque(true);
		pnlCurrentPlayerTrainCards.add(lblCurrentPlayerTrainCardGreen);

		JLabel lblCurrentPlayerTrainCardRainbow = new JLabel("0");
		lblCurrentPlayerTrainCardRainbow.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblCurrentPlayerTrainCardRainbow.setHorizontalAlignment(SwingConstants.CENTER);
		lblCurrentPlayerTrainCardRainbow.setForeground(Color.WHITE);
		lblCurrentPlayerTrainCardRainbow.setBackground(Color.MAGENTA);
		lblCurrentPlayerTrainCardRainbow.setOpaque(true);
		pnlCurrentPlayerTrainCards.add(lblCurrentPlayerTrainCardRainbow);

		JPanel pnlCurrentPlayerTurnChoices = new JPanel();
		pnlDecks.add(pnlCurrentPlayerTurnChoices);

		pnlCurrentPlayerTurnChoices.setLayout(new GridLayout(3, 1, 0, 0));

		JButton btnPickTrainCards = new JButton("Pick Train Cards");
		pnlCurrentPlayerTurnChoices.add(btnPickTrainCards);

		JButton btnClaimARoute = new JButton("Claim a Route");
		pnlCurrentPlayerTurnChoices.add(btnClaimARoute);

		JButton btnPickDestCards = new JButton("Pick Destination Cards");
		pnlCurrentPlayerTurnChoices.add(btnPickDestCards);

		JPanel pnlFaceUpTrainCard5 = new JPanel();
		pnlFaceUpTrainCard5.setBorder(new BevelBorder(BevelBorder.RAISED, null, null, null, null));
		//pnlFaceUpTrainCard5.setBackground(Color.RED);
		pnlFaceUpTrainCard5.setBackground(Deck.trainFaceUpCards.get(4).getColor().getRealColor());//?
		pnlDecks.add(pnlFaceUpTrainCard5);

		JPanel pnlFaceUpTrainCard4 = new JPanel();
		pnlFaceUpTrainCard4.setBorder(new BevelBorder(BevelBorder.RAISED, null, null, null, null));
		//pnlFaceUpTrainCard4.setBackground(Color.ORANGE);
		pnlFaceUpTrainCard4.setBackground(Deck.trainFaceUpCards.get(3).getColor().getRealColor());//?
		pnlDecks.add(pnlFaceUpTrainCard4);

		JPanel pnlFaceUpTrainCard3 = new JPanel();
		pnlFaceUpTrainCard3.setBorder(new BevelBorder(BevelBorder.RAISED, null, null, null, null));
		//pnlFaceUpTrainCard3.setBackground(Color.BLACK);
		pnlFaceUpTrainCard3.setBackground(Deck.trainFaceUpCards.get(2).getColor().getRealColor());//?
		pnlDecks.add(pnlFaceUpTrainCard3);

		JPanel pnlFaceUpTrainCard2 = new JPanel();
		pnlFaceUpTrainCard2.setBorder(new BevelBorder(BevelBorder.RAISED, null, null, null, null));
		//pnlFaceUpTrainCard2.setBackground(Color.BLUE);
		pnlFaceUpTrainCard2.setBackground(Deck.trainFaceUpCards.get(1).getColor().getRealColor());//?
		pnlDecks.add(pnlFaceUpTrainCard2);

		JPanel pnlFaceUpTrainCard1 = new JPanel();
		pnlFaceUpTrainCard1.setBorder(new BevelBorder(BevelBorder.RAISED, null, null, null, null));
		//pnlFaceUpTrainCard1.setBackground(Color.GREEN);
		pnlFaceUpTrainCard1.setBackground(Deck.trainFaceUpCards.get(0).getColor().getRealColor());//?
		pnlDecks.add(pnlFaceUpTrainCard1);

		JPanel pnlTrainCardDeck = new JPanel();
		pnlDecks.add(pnlTrainCardDeck);
		pnlTrainCardDeck.setLayout(new BorderLayout(0, 0));

		JProgressBar pbrTrainCardDeck = new JProgressBar();
		pbrTrainCardDeck.setOrientation(SwingConstants.VERTICAL);
		pbrTrainCardDeck.setValue(100);
		pnlTrainCardDeck.add(pbrTrainCardDeck, BorderLayout.EAST);

		JButton btnTrainCardDeck = new JButton("Train Card Deck");
		pnlTrainCardDeck.add(btnTrainCardDeck, BorderLayout.CENTER);

		JPanel pnlCurrentPlayerAvatar = new JPanel();
		pnlDecks.add(pnlCurrentPlayerAvatar);
		pnlCurrentPlayerAvatar.setLayout(new BorderLayout(0, 0));

		JLabel lblPlaceHolderAvatarLabel = new JLabel("[Current Player Image Placeholder]");
		lblPlaceHolderAvatarLabel.setHorizontalAlignment(SwingConstants.CENTER);
		pnlCurrentPlayerAvatar.add(lblPlaceHolderAvatarLabel, BorderLayout.CENTER);

		// ActionListeners for Button Clicking Actions
		pnlFaceUpTrainCard5.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent arg0) {
				// TODO:debug action listener code, do not leave in final
				// version-SF
				System.out.println("Face Up Train Card 5");
			}
		});

		pnlFaceUpTrainCard4.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				// TODO:debug action listener code, do not leave in final
				// version-SF
				System.out.println("Face Up Train Card 4");
			}
		});

		pnlFaceUpTrainCard3.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				// TODO:debug action listener code, do not leave in final
				// version-SF
				System.out.println("Face Up Train Card 3");
			}
		});

		pnlFaceUpTrainCard2.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				// TODO:debug action listener code, do not leave in final
				// version-SF
				System.out.println("Face Up Train Card 2");
			}
		});

		pnlFaceUpTrainCard1.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				// TODO:debug action listener code, do not leave in final
				// version-SF
				System.out.println("Face Up Train Card 1");
			}
		});

		btnTrainCardDeck.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// TODO:debug action listener code, do not leave in final
				// version-SF
				System.out.println("Train Card Deck Button");
			}
		});

		btnPickTrainCards.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// TODO:debug action listener code, do not leave in final
				// version-SF
				System.out.println("Current Player Pick Train Cards Button");
				ArrayList<City> cityList = ParseCSVData.parseCities();
				for (City c : cityList)
					System.out.println(c.getCityName() + "\t" + c.getX_val() + "\t" + c.getY_val());
			}
		});

		btnClaimARoute.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// TODO:debug action listener code, do not leave in final
				// version-SF
				System.out.println("Current Player Claim A Route Button");
				ArrayList<Path> pathList = ParseCSVData.parseRoutes();
				for (Path p : pathList)
					System.out.println(p.getCity1() + "\t" + p.getCity2() + "\t" + p.getCost() + "\t" + p.getColor());
			}
		});

		btnPickDestCards.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// TODO:debug action listener code, do not leave in final
				// version-SF
				System.out.println("Current Player Pick Destination Cards Button");
				
				
				//Get initial destination cards
				List<DestinationCard> initialDesCards = PlayerHandler.drawDesTickets(new Player(playerColor.BLACK));
				List<DestinationCard> rejectedDesCards = new ArrayList<DestinationCard>();
				
				//debug
				//System.out.println(initialDesCards.size());
				for (DestinationCard dc : initialDesCards)
					System.out.println(dc.getCity1() + "\t" + dc.getCity2() + "\t" + dc.getPoint());
				
				JCheckBox cbDestCardOpt0 = new JCheckBox(initialDesCards.get(0).toString());
				JCheckBox cbDestCardOpt1 = new JCheckBox(initialDesCards.get(1).toString());
				JCheckBox cbDestCardOpt2 = new JCheckBox(initialDesCards.get(2).toString());
				
				String message = "Please choose your initial Destination Cards. You must pick a minimum of two cards.";
				
				Object[] params = {message, cbDestCardOpt0, cbDestCardOpt1, cbDestCardOpt2};
				
				JOptionPane.showMessageDialog(null, params, "Choose Destination Card(s)", JOptionPane.PLAIN_MESSAGE);
				
				if (!cbDestCardOpt2.isSelected())
					rejectedDesCards.add(initialDesCards.remove(2));
				if (!cbDestCardOpt1.isSelected())
					rejectedDesCards.add(initialDesCards.remove(1));
				if (!cbDestCardOpt0.isSelected())
					rejectedDesCards.add(initialDesCards.remove(0));
						
				System.out.println("cards chosen were:" + initialDesCards); //TODO: debug
				System.out.println("cards discarded were:" + rejectedDesCards); //TODO: debug
				
				PlayerHandler.returnDesCardToDeck(rejectedDesCards); 
				Player p = new Player(playerColor.BLACK);
				p.getDesCards().addAll(initialDesCards);
				System.out.println("cards in players hand:" + p.getDesCards());
				
						
				//display destination cards in JList
				for (DestinationCard dc : p.getDesCards()) {
					destList.addElement(dc.toString());
				}


				
				//debug
				ArrayList<DestinationCard> destinationCardList = ParseCSVData.parseDestinationCards();
				for (DestinationCard dc : destinationCardList)
					System.out.println(dc.getCity1() + "\t" + dc.getCity2() + "\t" + dc.getPoint());
			}
		});

		//test
		
		pnlGraph.add(new GraphView());
		
		//endtest
	}

}
